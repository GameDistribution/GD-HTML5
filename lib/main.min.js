!function e(t, n, i) {
    function o(a, r) {
        if (!n[a]) {
            if (!t[a]) {
                var d = "function" == typeof require && require;
                if (!r && d) return d(a, !0);
                if (s) return s(a, !0);
                var l = new Error("Cannot find module '" + a + "'");
                throw l.code = "MODULE_NOT_FOUND", l;
            }
            var u = n[a] = {
                exports: {}
            };
            t[a][0].call(u.exports, function(e) {
                var n = t[a][1][e];
                return o(n || e);
            }, u, u.exports, e, t, n, i);
        }
        return n[a].exports;
    }
    for (var s = "function" == typeof require && require, a = 0; a < i.length; a++) o(i[a]);
    return o;
}({
    1: [ function(e, t, n) {
        t.exports = {
            name: "@gamedistribution.com/html5-sdk",
            version: "0.0.3",
            author: "Gamedistribution.com",
            description: "Gamedistribution.com HTML5 SDK",
            url: "https://gamedistribution.com",
            license: "MIT",
            main: "lib/main.js",
            scripts: {
                test: 'echo "Error: no test specified" && exit 1'
            },
            directories: {
                doc: "https://github.com/GameDistribution/GD-HTML5/wiki"
            },
            repository: {
                type: "git",
                url: "git@github.com:GameDistribution/GD-HTML5.git"
            },
            devDependencies: {
                "babel-preset-es2015": "^6.6.0",
                babelify: "^7.2.0",
                grunt: "^1.0.1",
                "grunt-banner": "^0.6.0",
                "grunt-browser-sync": "^2.2.0",
                "grunt-browserify": "^5.2.0",
                "grunt-contrib-copy": "^1.0.0",
                "grunt-contrib-uglify": "^3.0.1",
                "grunt-contrib-watch": "^1.0.0",
                "grunt-contrib-clean": "^1.1.0"
            },
            engines: {
                node: ">=6.0.0"
            }
        };
    }, {} ],
    2: [ function(e, t, n) {
        "use strict";
        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        var o = function() {
            function e(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1;
                    i.configurable = !0;
                    "value" in i && (i.writable = !0);
                    Object.defineProperty(e, i.key, i);
                }
            }
            return function(t, n, i) {
                n && e(t.prototype, n);
                i && e(t, i);
                return t;
            };
        }(), s = e("../modules/common"), a = e("../modules/dankLog"), r = null, d = function() {
            function e(t) {
                i(this, e);
                if (r) return r;
                r = this;
                var n = {
                    version: "",
                    sVersion: "",
                    gameId: "",
                    userId: "",
                    referrer: "",
                    sessionId: "",
                    serverId: "",
                    regId: "",
                    serverName: "",
                    pingTimeOut: 3e4
                };
                this.options = t ? (0, s.extendDefaults)(n, t) : n;
                this.logName = "ANALYTICS";
                this.pool = [];
                this.logchannel = {
                    act: "",
                    gid: this.options.gameId,
                    ref: this.options.referrer,
                    sid: this.options.sessionId,
                    ver: this.options.version
                };
                (0, a.dankLog)(this.logName, {
                    gameId: this.options.gameId,
                    userId: this.options.userId,
                    server: this.options.serverName,
                    parent: this.logchannel.ref,
                    session: this.logchannel.sid
                }, "success");
                this._visit();
                setInterval(this._timerHandler.bind(this), this.options.pingTimeOut);
            }
            o(e, [ {
                key: "_timerHandler",
                value: function() {
                    var e = {
                        action: "ping",
                        value: "ping"
                    };
                    this.pool.length > 0 && (e = this.pool.shift());
                    try {
                        this.logchannel.act = JSON.stringify(e);
                        (0, s.fetchData)(this.options.serverName, this.logchannel, this._onCompleted.bind(this));
                        (0, a.dankLog)(this.logName, this.logchannel.act, "success");
                    } catch (e) {
                        (0, a.dankLog)(this.logName, e, "error");
                    }
                }
            }, {
                key: "_onCompleted",
                value: function(e) {
                    if (e && void 0 !== e) try {
                        var t = JSON.parse(e);
                        switch (t.act) {
                          case "cmd":
                            switch (t.res) {
                              case "visit":
                                this._visit();
                            }
                            break;

                          case "visit":
                            if (t.res === this.logchannel.sid) {
                                var n = parseInt((0, s.getCookie)("state_" + this.options.gameId));
                                n = n || 0;
                                n++;
                                (0, s.setCookie)("visit_" + this.options.gameId, 0, 30);
                                (0, s.setCookie)("state_" + this.options.gameId, n, 30);
                            }
                            break;

                          case "play":
                            t.res === this.logchannel.sid && (0, s.setCookie)("play_" + this.options.gameId, 0, 30);
                            break;

                          case "custom":
                            t.res === this.logchannel.sid && void 0 !== t.custom && (0, s.setCookie)(t.custom + "_" + this.options.gameId, 0, 30);
                        }
                    } catch (e) {
                        (0, a.dankLog)(this.logName, e, "error");
                        this._visit();
                    }
                }
            }, {
                key: "_pushLog",
                value: function(e) {
                    for (var t = 0; t < this.pool.length; t++) if (this.pool[t].action === e.action) {
                        "custom" === this.pool[t].action && this.pool[t].value[0].key === e.value[0].key ? this.pool[t].value[0].value++ : this.pool[t].value = e.value;
                        break;
                    }
                    t === this.pool.length && this.pool.push(e);
                }
            }, {
                key: "_visit",
                value: function() {
                    try {
                        var e = parseInt((0, s.getCookie)("visit_" + this.options.gameId));
                        e = e || 0;
                        var t = parseInt((0, s.getCookie)("state_" + this.options.gameId));
                        t = t || 0;
                        this._pushLog({
                            action: "visit",
                            value: e,
                            state: t
                        });
                    } catch (e) {
                        console.log(e);
                    }
                }
            }, {
                key: "play",
                value: function() {
                    try {
                        var e = parseInt((0, s.getCookie)("play_" + this.options.gameId));
                        e = e || 0;
                        e++;
                        (0, s.setCookie)("play_" + this.options.gameId, e, 30);
                        this._pushLog({
                            action: "play",
                            value: e
                        });
                    } catch (e) {
                        console.log(e);
                    }
                }
            }, {
                key: "customLog",
                value: function(e) {
                    try {
                        if ("play" !== e || "visit" !== e) {
                            var t = (0, s.getCookie)(e + "_" + this.options.gameId);
                            t = t || 1;
                            (0, s.setCookie)(e + "_" + this.options.gameId, t, 30, this.options.gameId);
                            this._pushLog({
                                action: "custom",
                                value: new Array({
                                    key: e,
                                    value: t
                                })
                            });
                        }
                    } catch (e) {
                        console.log(e);
                    }
                }
            } ]);
            return e;
        }();
        n.default = d;
    }, {
        "../modules/common": 7,
        "../modules/dankLog": 8
    } ],
    3: [ function(e, t, n) {
        "use strict";
        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        var o = function() {
            function e(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1;
                    i.configurable = !0;
                    "value" in i && (i.writable = !0);
                    Object.defineProperty(e, i.key, i);
                }
            }
            return function(t, n, i) {
                n && e(t.prototype, n);
                i && e(t, i);
                return t;
            };
        }(), s = null, a = function() {
            function e() {
                i(this, e);
                if (s) return s;
                s = this;
                this.listeners = {};
            }
            o(e, [ {
                key: "_getListenerIdx",
                value: function(e, t, n) {
                    var i = this.listeners[e], o = void 0, s = -1;
                    if (!i || 0 === i.length) return s;
                    for (o = 0; o < i.length; o++) if (i[o].callback === t && (!n || n === i[o].scope)) {
                        s = o;
                        break;
                    }
                    return s;
                }
            }, {
                key: "subscribe",
                value: function(e, t, n) {
                    var i = void 0;
                    if (!e) throw new Error("Event name cannot be null or undefined.");
                    if (!t || "function" != typeof t) throw new Error("Listener must be of type function.");
                    if (!(this._getListenerIdx(e, t, n) >= 0)) {
                        i = {
                            callback: t,
                            scope: n
                        };
                        this.listeners[e] = this.listeners[e] || [];
                        this.listeners[e].push(i);
                    }
                }
            }, {
                key: "broadcast",
                value: function(e, t) {
                    var n = this.listeners[e];
                    if (e && this.listeners[e]) {
                        t = t || {};
                        n.forEach(function(e) {
                            e.callback.call(e.scope, t);
                        });
                    }
                }
            } ]);
            return e;
        }();
        n.default = a;
    }, {} ],
    4: [ function(e, t, n) {
        "use strict";
        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        var o = function() {
            function e(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1;
                    i.configurable = !0;
                    "value" in i && (i.writable = !0);
                    Object.defineProperty(e, i.key, i);
                }
            }
            return function(t, n, i) {
                n && e(t.prototype, n);
                i && e(t, i);
                return t;
            };
        }(), s = function(e) {
            return e && e.__esModule ? e : {
                default: e
            };
        }(e("../components/EventBus")), a = (e("../modules/dankLog"), null), r = function() {
            function e() {
                i(this, e);
                if (a) return a;
                a = this;
                this.eventBus = new s.default();
            }
            o(e, [ {
                key: "start",
                value: function() {
                    var e = "\n            #gdApi-implementation {\n                box-sizing: border-box;\n                position: fixed;\n                z-index: 100;\n                bottom: 0;\n                width: 100%;\n                padding: 10px 20px 20px;\n                background: linear-gradient(90deg,#3d1b5d,#5c3997);\n                box-shadow: 0 0 8px rgba(0, 0, 0, 0.8);\n                color: #fff;\n                font-family: Helvetica, Arial, sans-serif;\n                font-size: 16px;\n            }\n            #gdApi-implementation > div {\n                width: 100%;\n            }\n            #gdApi-implementation > div > div {\n                float: left;\n                margin-right: 20px;\n            }\n            #gdApi-implementation > div > div:last-of-type {\n                float: right;\n                margin-right: 0;\n                text-align: right;\n            }\n            #gdApi-implementation h2 {\n                font-size: 10px;\n                color: #ffd1b1;\n                text-shadow: 0 0.07em 0 rgba(0,0,0,.5);\n                text-transform: uppercase;\n                margin-bottom: 5px;\n            }\n            #gdApi-implementation button {\n                background: #44a5ab;\n                margin-left: 2.5px;\n                padding: 10px 20px;\n                border: 0;\n                border-radius: 3px;\n                color: #fff;\n                outline: 0;\n                cursor: pointer;\n            }\n            #gdApi-implementation button:hover {\n                background: #4fb3b9;\n            }\n            #gdApi-implementation button:active {\n                background: #62bbc0;\n            }\n            #gdApi-implementation button:first-of-type {\n                margin-left: 0;\n            }\n            #gdApi-implementation button span {\n                font-size: 10px;\n                padding: 3px 6px;\n                color: rgba(255, 255, 255, 0.4);\n                background-color: rgba(0, 0, 0, 0.2);\n                border-radius: 3px;\n                margin-left: 10px;\n            }\n        ", t = document.head || document.getElementsByTagName("head")[0], n = document.createElement("style");
                    n.type = "text/css";
                    n.styleSheet ? n.styleSheet.cssText = e : n.appendChild(document.createTextNode(e));
                    t.appendChild(n);
                    var i = document.body || document.getElementsByTagName("body")[0], o = document.createElement("div");
                    o.style.position = "fixed";
                    o.style.zIndex = 100;
                    o.style.bottom = 0;
                    o.innerHTML = '\n            <div id="gdApi-implementation">\n                <div>\n                    <div>\n                        <h2>Advertisement</h2>\n                        <button id="gdApi-showBanner">showBanner</button>\n                        <button id="gdApi-cancel">Cancel</button>\n                    </div>\n                     <div>\n                        <h2>Game</h2>\n                        <button id="gdApi-pauseGame">pauseGame</button>\n                        <button id="gdApi-resumeGame">resumeGame</button>\n                    </div>\n                    <div>\n                        <h2>Analytics</h2>\n                        <button id="gdApi-playCounter">event: play</button>\n                        <button id="gdApi-logCounter">event: custom <span>key: test</span></button>\n                    </div>\n                </div>\n            </div>\n        ';
                    i.parentNode.insertBefore(o, i);
                    var s = document.getElementById("gdApi-pauseGame"), a = document.getElementById("gdApi-resumeGame"), r = document.getElementById("gdApi-showBanner"), d = document.getElementById("gdApi-cancel"), l = document.getElementById("gdApi-playCounter"), u = document.getElementById("gdApi-logCounter");
                    s.addEventListener("click", function() {
                        window.gdApi.onPauseGame();
                    });
                    a.addEventListener("click", function() {
                        window.gdApi.onResumeGame();
                    });
                    r.addEventListener("click", function() {
                        window.gdApi.showBanner();
                    });
                    d.addEventListener("click", function() {
                        window.gdApi.videoAdInstance.cancel();
                    });
                    l.addEventListener("click", function() {
                        window.gdApi.play();
                    });
                    u.addEventListener("click", function() {
                        window.gdApi.customLog("test");
                    });
                }
            } ]);
            return e;
        }();
        n.default = r;
    }, {
        "../components/EventBus": 3,
        "../modules/dankLog": 8
    } ],
    5: [ function(e, t, n) {
        "use strict";
        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        var o = function() {
            function e(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1;
                    i.configurable = !0;
                    "value" in i && (i.writable = !0);
                    Object.defineProperty(e, i.key, i);
                }
            }
            return function(t, n, i) {
                n && e(t.prototype, n);
                i && e(t, i);
                return t;
            };
        }(), s = function(e) {
            return e && e.__esModule ? e : {
                default: e
            };
        }(e("../components/EventBus")), a = e("../modules/common"), r = e("../modules/dankLog"), d = null, l = function() {
            function e(t) {
                var n = this;
                i(this, e);
                if (d) return d;
                d = this;
                var o = {
                    debug: !1,
                    prefix: "gdApi-",
                    autoplay: !0,
                    responsive: !0,
                    width: 640,
                    height: 360,
                    locale: "en"
                };
                this.options = t ? (0, a.extendDefaults)(o, t) : o;
                this.adsLoader = null;
                this.adsManager = null;
                this.adDisplayContainer = null;
                this.eventBus = new s.default();
                this.safetyTimer = null;
                this.requestAttempts = 0;
                this.containerTransitionSpeed = 200;
                this.preroll = !0;
                this.tag = "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&correlator=";
                this.gameId = 0;
                this.eventCategory = "AD";
                this.adsLoaderPromise = new Promise(function(e) {
                    n.eventBus.subscribe("AD_SDK_LOADER_READY", function(t) {
                        return e();
                    });
                });
                this.adsManagerPromise = new Promise(function(e) {
                    n.eventBus.subscribe("AD_SDK_MANAGER_READY", function(t) {
                        return e();
                    });
                });
            }
            o(e, [ {
                key: "start",
                value: function() {
                    var e = this;
                    this._startSafetyTimer();
                    this.options.responsive = this.options.responsive && document.documentElement.clientWidth <= 1024;
                    if (this.options.responsive) {
                        this.options.width = document.documentElement.clientWidth;
                        this.options.height = document.documentElement.clientHeight;
                    }
                    new Promise(function(t, n) {
                        if (e.options.autoplay) {
                            e.options.autoplay = !1;
                            try {
                                var i = new Audio(), o = i.canPlayType("audio/ogg") ? "data:audio/ogg;base64,T2dnUwACAAAAAAAAAADqnjMlAAAAAOyyzPIBHgF2b3JiaXMAAAAAAUAfAABAHwAAQB8AAEAfAACZAU9nZ1MAAAAAAAAAAAAA6p4zJQEAAAANJGeqCj3//////////5ADdm9yYmlzLQAAAFhpcGguT3JnIGxpYlZvcmJpcyBJIDIwMTAxMTAxIChTY2hhdWZlbnVnZ2V0KQAAAAABBXZvcmJpcw9CQ1YBAAABAAxSFCElGVNKYwiVUlIpBR1jUFtHHWPUOUYhZBBTiEkZpXtPKpVYSsgRUlgpRR1TTFNJlVKWKUUdYxRTSCFT1jFloXMUS4ZJCSVsTa50FkvomWOWMUYdY85aSp1j1jFFHWNSUkmhcxg6ZiVkFDpGxehifDA6laJCKL7H3lLpLYWKW4q91xpT6y2EGEtpwQhhc+211dxKasUYY4wxxsXiUyiC0JBVAAABAABABAFCQ1YBAAoAAMJQDEVRgNCQVQBABgCAABRFcRTHcRxHkiTLAkJDVgEAQAAAAgAAKI7hKJIjSZJkWZZlWZameZaouaov+64u667t6roOhIasBACAAAAYRqF1TCqDEEPKQ4QUY9AzoxBDDEzGHGNONKQMMogzxZAyiFssLqgQBKEhKwKAKAAAwBjEGGIMOeekZFIi55iUTkoDnaPUUcoolRRLjBmlEluJMYLOUeooZZRCjKXFjFKJscRUAABAgAMAQICFUGjIigAgCgCAMAYphZRCjCnmFHOIMeUcgwwxxiBkzinoGJNOSuWck85JiRhjzjEHlXNOSuekctBJyaQTAAAQ4AAAEGAhFBqyIgCIEwAwSJKmWZomipamiaJniqrqiaKqWp5nmp5pqqpnmqpqqqrrmqrqypbnmaZnmqrqmaaqiqbquqaquq6nqrZsuqoum65q267s+rZru77uqapsm6or66bqyrrqyrbuurbtS56nqqKquq5nqq6ruq5uq65r25pqyq6purJtuq4tu7Js664s67pmqq5suqotm64s667s2rYqy7ovuq5uq7Ks+6os+75s67ru2rrwi65r66os674qy74x27bwy7ouHJMnqqqnqq7rmarrqq5r26rr2rqmmq5suq4tm6or26os67Yry7aumaosm64r26bryrIqy77vyrJui67r66Ys67oqy8Lu6roxzLat+6Lr6roqy7qvyrKuu7ru+7JuC7umqrpuyrKvm7Ks+7auC8us27oxuq7vq7It/KosC7+u+8Iy6z5jdF1fV21ZGFbZ9n3d95Vj1nVhWW1b+V1bZ7y+bgy7bvzKrQvLstq2scy6rSyvrxvDLux8W/iVmqratum6um7Ksq/Lui60dd1XRtf1fdW2fV+VZd+3hV9pG8OwjK6r+6os68Jry8ov67qw7MIvLKttK7+r68ow27qw3L6wLL/uC8uq277v6rrStXVluX2fsSu38QsAABhwAAAIMKEMFBqyIgCIEwBAEHIOKQahYgpCCKGkEEIqFWNSMuakZM5JKaWUFEpJrWJMSuaclMwxKaGUlkopqYRSWiqlxBRKaS2l1mJKqcVQSmulpNZKSa2llGJMrcUYMSYlc05K5pyUklJrJZXWMucoZQ5K6iCklEoqraTUYuacpA46Kx2E1EoqMZWUYgupxFZKaq2kFGMrMdXUWo4hpRhLSrGVlFptMdXWWqs1YkxK5pyUzDkqJaXWSiqtZc5J6iC01DkoqaTUYiopxco5SR2ElDLIqJSUWiupxBJSia20FGMpqcXUYq4pxRZDSS2WlFosqcTWYoy1tVRTJ6XFklKMJZUYW6y5ttZqDKXEVkqLsaSUW2sx1xZjjqGkFksrsZWUWmy15dhayzW1VGNKrdYWY40x5ZRrrT2n1mJNMdXaWqy51ZZbzLXnTkprpZQWS0oxttZijTHmHEppraQUWykpxtZara3FXEMpsZXSWiypxNhirLXFVmNqrcYWW62ltVprrb3GVlsurdXcYqw9tZRrrLXmWFNtBQAADDgAAASYUAYKDVkJAEQBAADGMMYYhEYpx5yT0ijlnHNSKucghJBS5hyEEFLKnINQSkuZcxBKSSmUklJqrYVSUmqttQIAAAocAAACbNCUWByg0JCVAEAqAIDBcTRNFFXVdX1fsSxRVFXXlW3jVyxNFFVVdm1b+DVRVFXXtW3bFn5NFFVVdmXZtoWiqrqybduybgvDqKqua9uybeuorqvbuq3bui9UXVmWbVu3dR3XtnXd9nVd+Bmzbeu2buu+8CMMR9/4IeTj+3RCCAAAT3AAACqwYXWEk6KxwEJDVgIAGQAAgDFKGYUYM0gxphhjTDHGmAAAgAEHAIAAE8pAoSErAoAoAADAOeecc84555xzzjnnnHPOOeecc44xxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY0wAwE6EA8BOhIVQaMhKACAcAABACCEpKaWUUkoRU85BSSmllFKqFIOMSkoppZRSpBR1lFJKKaWUIqWgpJJSSimllElJKaWUUkoppYw6SimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaVUSimllFJKKaWUUkoppRQAYPLgAACVYOMMK0lnhaPBhYasBAByAwAAhRiDEEJpraRUUkolVc5BKCWUlEpKKZWUUqqYgxBKKqmlklJKKbXSQSihlFBKKSWUUkooJYQQSgmhlFRCK6mEUkoHoYQSQimhhFRKKSWUzkEoIYUOQkmllNRCSB10VFIpIZVSSiklpZQ6CKGUklJLLZVSWkqpdBJSKamV1FJqqbWSUgmhpFZKSSWl0lpJJbUSSkklpZRSSymFVFJJJYSSUioltZZaSqm11lJIqZWUUkqppdRSSiWlkEpKqZSSUmollZRSaiGVlEpJKaTUSimlpFRCSamlUlpKLbWUSkmptFRSSaWUlEpJKaVSSksppRJKSqmllFpJKYWSUkoplZJSSyW1VEoKJaWUUkmptJRSSymVklIBAEAHDgAAAUZUWoidZlx5BI4oZJiAAgAAQABAgAkgMEBQMApBgDACAQAAAADAAAAfAABHARAR0ZzBAUKCwgJDg8MDAAAAAAAAAAAAAACAT2dnUwAEAAAAAAAAAADqnjMlAgAAADzQPmcBAQA=" : "data:audio/mpeg;base64,/+MYxAAAAANIAUAAAASEEB/jwOFM/0MM/90b/+RhST//w4NFwOjf///PZu////9lns5GFDv//l9GlUIEEIAAAgIg8Ir/JGq3/+MYxDsLIj5QMYcoAP0dv9HIjUcH//yYSg+CIbkGP//8w0bLVjUP///3Z0x5QCAv/yLjwtGKTEFNRTMuOTeqqqqqqqqqqqqq/+MYxEkNmdJkUYc4AKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
                                i.autoplay = !0;
                                i.volume = 0;
                                i.addEventListener("playing", function() {
                                    e.options.autoplay = !0;
                                }, !1);
                                i.src = o;
                                setTimeout(function() {
                                    (0, r.dankLog)("AD_SDK_AUTOPLAY", e.options.autoplay, "success");
                                    t();
                                }, 100);
                            } catch (t) {
                                (0, r.dankLog)("AD_SDK_AUTOPLAY", e.options.autoplay, "warning");
                                n(t);
                            }
                        } else {
                            (0, r.dankLog)("AD_SDK_AUTOPLAY", e.options.autoplay, "success");
                            t();
                        }
                    }).catch(function() {
                        e._onError("Auto play promise did not resolve!");
                    }).then(function() {
                        return e._loadIMAScript();
                    }).catch(function(t) {
                        return e._onError(t);
                    });
                }
            }, {
                key: "play",
                value: function() {
                    var e = this;
                    this.adsManagerPromise.then(function() {
                        if (e.adsManager && e.adDisplayContainer) {
                            e.adDisplayContainer.initialize();
                            try {
                                e.adsManager.init(e.options.width, e.options.height, google.ima.ViewMode.NORMAL);
                                if (e.adContainer) {
                                    e.adContainer.style.display = "block";
                                    setTimeout(function() {
                                        e.adContainer.style.opacity = 1;
                                    }, 10);
                                }
                                e.adsManager.start();
                            } catch (t) {
                                e._onError(t);
                            }
                        } else e._onError("Missing an adsManager or adDisplayContainer");
                    });
                }
            }, {
                key: "cancel",
                value: function() {
                    var e = this;
                    if (this.adContainer) {
                        this.adContainer.style.opacity = 0;
                        setTimeout(function() {
                            e.adContainer.style.display = "none";
                        }, this.containerTransitionSpeed);
                    }
                    Promise.all([ this.adsLoaderPromise, this.adsManagerPromise ]).then(function() {
                        e.adsManager && e.adsManager.destroy();
                        e.adsLoader && e.adsLoader.contentComplete();
                        if (e.requestAttempts <= 3) {
                            e.requestAttempts > 1 && (0, r.dankLog)("AD_SDK_REQUEST_ATTEMPT", e.requestAttempts, "warning");
                            e._requestAds();
                            e.requestAttempts++;
                        }
                        e.eventBus.broadcast("AD_CANCELED", {
                            name: "AD_CANCELED",
                            message: "Advertisement has been canceled.",
                            status: "warning",
                            analytics: {
                                category: e.eventCategory,
                                action: "AD_CANCELED",
                                label: e.gameId,
                                value: "Advertisement has been canceled."
                            }
                        });
                    }).catch(function(e) {
                        return console.log(e);
                    });
                }
            }, {
                key: "_loadIMAScript",
                value: function() {
                    var e = this, t = this.options.debug ? "//imasdk.googleapis.com/js/sdkloader/ima3_debug.js" : "//imasdk.googleapis.com/js/sdkloader/ima3.js", n = document.getElementsByTagName("script")[0], i = document.createElement("script");
                    i.type = "text/javascript";
                    i.async = !0;
                    i.src = t;
                    i.onload = function() {
                        e._createPlayer();
                    };
                    i.onerror = function() {
                        var t = document.body || document.getElementsByTagName("body")[0], n = document.createElement("div");
                        n.id = e.options.prefix + "adBlocker";
                        n.style.position = "fixed";
                        n.style.zIndex = 99;
                        n.style.top = 0;
                        n.style.left = 0;
                        n.style.width = "100%";
                        n.style.height = "100%";
                        n.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
                        var i = document.createElement("img");
                        i.src = "/gd-adblocker.jpg";
                        i.srcset = "/gd-adblocker.jpg, /gd-adblocker@2x.jpg";
                        i.style.display = "block";
                        i.style.position = "absolute";
                        i.style.left = "50%";
                        i.style.top = "50%";
                        i.style.width = "100%";
                        i.style.height = "auto";
                        i.style.maxWidth = "461px";
                        i.style.maxHeight = "376px";
                        i.style.backgroundColor = "#000000";
                        i.style.transform = "translate(-50%, -50%)";
                        i.style.boxShadow = "0 0 8px rgba(0, 0, 0, 1)";
                        n.appendChild(i);
                        t.appendChild(n);
                        e._onError("IMA script failed to load! Probably due to an ADBLOCKER!");
                    };
                    n.parentNode.insertBefore(i, n);
                }
            }, {
                key: "_createPlayer",
                value: function() {
                    var e = this, t = document.body || document.getElementsByTagName("body")[0];
                    this.adContainer = document.createElement("div");
                    this.adContainer.id = this.options.prefix + "advertisement";
                    this.adContainer.style.display = "none";
                    this.adContainer.style.position = "fixed";
                    this.adContainer.style.zIndex = 99;
                    this.adContainer.style.top = 0;
                    this.adContainer.style.left = 0;
                    this.adContainer.style.width = "100%";
                    this.adContainer.style.height = "100%";
                    this.adContainer.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
                    this.adContainer.style.opacity = 0;
                    this.adContainer.style.transition = "opacity " + this.containerTransitionSpeed + "ms cubic-bezier(0.55, 0, 0.1, 1)";
                    var n = document.createElement("div");
                    n.id = this.options.prefix + "advertisement_slot";
                    n.style.position = "absolute";
                    n.style.backgroundColor = "#000000";
                    if (this.options.responsive) {
                        n.style.top = 0;
                        n.style.left = 0;
                    } else {
                        n.style.left = "50%";
                        n.style.top = "50%";
                        n.style.transform = "translate(-50%, -50%)";
                        n.style.boxShadow = "0 0 8px rgba(0, 0, 0, 1)";
                    }
                    n.style.width = this.options.width + "px";
                    n.style.height = this.options.height + "px";
                    this.adContainer.appendChild(n);
                    t.appendChild(this.adContainer);
                    this.options.responsive && window.addEventListener("resize", function() {
                        e.options.width = document.documentElement.clientWidth;
                        e.options.height = document.documentElement.clientHeight;
                        n.style.width = e.options.width + "px";
                        n.style.height = e.options.height + "px";
                    });
                    this._setUpIMA();
                }
            }, {
                key: "_setUpIMA",
                value: function() {
                    google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);
                    google.ima.settings.setLocale(this.options.locale);
                    this.adDisplayContainer = new google.ima.AdDisplayContainer(document.getElementById(this.options.prefix + "advertisement_slot"));
                    this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);
                    this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this._onAdsManagerLoaded, !1, this);
                    this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this._onAdError, !1, this);
                    var e = "AD_SDK_LOADER_READY";
                    this.eventBus.broadcast(e, {
                        name: e,
                        message: this.options,
                        status: "success",
                        analytics: {
                            category: this.eventCategory,
                            action: e,
                            label: this.gameId,
                            value: ""
                        }
                    });
                    this._requestAds();
                }
            }, {
                key: "_requestAds",
                value: function() {
                    if ("undefined" != typeof google) if (navigator.userAgent.match(/Crosswalk/i) || void 0 !== window.cordova) this._onError("Navigator.userAgent contains Crosswalk and/ or window.cordova. We're not allowed to run advertisements within Cordova."); else try {
                        var e = new google.ima.AdsRequest();
                        e.adTagUrl = this.tag;
                        e.linearAdSlotWidth = this.options.width;
                        e.linearAdSlotHeight = this.options.height;
                        e.nonLinearAdSlotWidth = this.options.width;
                        e.nonLinearAdSlotHeight = this.options.height;
                        e.forceNonLinearFullSlot = !0;
                        this.adsLoader.requestAds(e);
                        var t = "AD_SDK_LOADER_READY";
                        this.eventBus.broadcast(t, {
                            name: t,
                            message: this.tag,
                            status: "success",
                            analytics: {
                                category: this.eventCategory,
                                action: t,
                                label: this.gameId,
                                value: ""
                            }
                        });
                    } catch (e) {
                        this._onAdError(e);
                    } else this._onError("Unable to request ad, google IMA SDK not defined.");
                }
            }, {
                key: "_onAdsManagerLoaded",
                value: function(e) {
                    var t = this, n = new google.ima.AdsRenderingSettings();
                    n.enablePreloading = !0;
                    n.restoreCustomPlaybackStateOnAdBreakComplete = !0;
                    this.adsManager = e.getAdsManager(n);
                    this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this._onAdError.bind(this), !1, this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BREAK_READY, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_METADATA, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.CLICK, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.DURATION_CHANGE, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.FIRST_QUARTILE, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.IMPRESSION, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.INTERACTION, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.LINEAR_CHANGED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.LOG, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.MIDPOINT, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.PAUSED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.RESUMED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.THIRD_QUARTILE, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.USER_CLOSE, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.VOLUME_CHANGED, this._onAdEvent.bind(this), this);
                    this.adsManager.addEventListener(google.ima.AdEvent.Type.VOLUME_MUTED, this._onAdEvent.bind(this), this);
                    this.options.responsive && window.addEventListener("resize", function() {
                        t.adsManager.resize(t.options.width, t.options.height, google.ima.ViewMode.NORMAL);
                    });
                    if (this.adsManager && this.adDisplayContainer) {
                        this.requestAttempts = 0;
                        var i = "AD_SDK_MANAGER_READY";
                        this.eventBus.broadcast(i, {
                            name: i,
                            message: this.adsManager,
                            status: "success",
                            analytics: {
                                category: this.eventCategory,
                                action: i,
                                label: this.gameId,
                                value: ""
                            }
                        });
                    }
                    if (this.options.autoplay && this.preroll) {
                        this.preroll = !1;
                        this.play();
                    }
                }
            }, {
                key: "_onAdEvent",
                value: function(e) {
                    var t = this, n = "", i = "";
                    switch (e.type) {
                      case google.ima.AdEvent.Type.AD_BREAK_READY:
                        n = "AD_BREAK_READY";
                        i = "Fired when an ad rule or a VMAP ad break would have played if autoPlayAdBreaks is false.";
                        break;

                      case google.ima.AdEvent.Type.AD_METADATA:
                        n = "AD_METADATA";
                        i = "Fired when an ads list is loaded.";
                        break;

                      case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:
                        n = "ALL_ADS_COMPLETED";
                        i = "Fired when the ads manager is done playing all the ads.";
                        if (this.adContainer) {
                            this.adContainer.style.opacity = 0;
                            setTimeout(function() {
                                t.adContainer.style.display = "none";
                            }, this.containerTransitionSpeed);
                        }
                        Promise.all([ this.adsLoaderPromise, this.adsManagerPromise ]).then(function() {
                            t.adsManager && t.adsManager.destroy();
                            t.adsLoader && t.adsLoader.contentComplete();
                            t._requestAds();
                            t.eventBus.broadcast("AD_SDK_FINISHED", {
                                name: "AD_SDK_FINISHED",
                                message: "IMA is ready for new requests.",
                                status: "success",
                                analytics: {
                                    category: t.eventCategory,
                                    action: "AD_SDK_FINISHED",
                                    label: t.gameId,
                                    value: "IMA is ready for new requests."
                                }
                            });
                        }).catch(function(e) {
                            return console.log(e);
                        });
                        break;

                      case google.ima.AdEvent.Type.CLICK:
                        n = "CLICK";
                        i = "Fired when the ad is clicked.";
                        break;

                      case google.ima.AdEvent.Type.COMPLETE:
                        n = "COMPLETE";
                        i = "Fired when the ad completes playing.";
                        break;

                      case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:
                        n = "CONTENT_PAUSE_REQUESTED";
                        i = "Fired when content should be paused. This usually happens right before an ad is about to cover the content.";
                        break;

                      case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:
                        n = "CONTENT_RESUME_REQUESTED";
                        i = "Fired when content should be resumed. This usually happens when an ad finishes or collapses.";
                        break;

                      case google.ima.AdEvent.Type.DURATION_CHANGE:
                        n = "DURATION_CHANGE";
                        i = "Fired when the ad's duration changes.";
                        break;

                      case google.ima.AdEvent.Type.FIRST_QUARTILE:
                        n = "FIRST_QUARTILE";
                        i = "Fired when the ad playhead crosses first quartile.";
                        break;

                      case google.ima.AdEvent.Type.IMPRESSION:
                        n = "IMPRESSION";
                        i = "Fired when the impression URL has been pinged.";
                        break;

                      case google.ima.AdEvent.Type.INTERACTION:
                        n = "INTERACTION";
                        i = "Fired when an ad triggers the interaction callback. Ad interactions contain an interaction ID string in the ad data.";
                        break;

                      case google.ima.AdEvent.Type.LINEAR_CHANGED:
                        n = "LINEAR_CHANGED";
                        i = "Fired when the displayed ad changes from linear to nonlinear, or vice versa.";
                        break;

                      case google.ima.AdEvent.Type.LOADED:
                        n = "LOADED";
                        i = e.getAd().getContentType();
                        break;

                      case google.ima.AdEvent.Type.LOG:
                        if (e.getAdData().adError) {
                            n = "LOG";
                            i = e.getAdData();
                        }
                        break;

                      case google.ima.AdEvent.Type.MIDPOINT:
                        n = "MIDPOINT";
                        i = "Fired when the ad playhead crosses midpoint.";
                        break;

                      case google.ima.AdEvent.Type.PAUSED:
                        n = "PAUSED";
                        i = "Fired when the ad is paused.";
                        break;

                      case google.ima.AdEvent.Type.RESUMED:
                        n = "RESUMED";
                        i = "Fired when the ad is resumed.";
                        break;

                      case google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED:
                        n = "SKIPPABLE_STATE_CHANGED";
                        i = "Fired when the displayed ads skippable state is changed.";
                        break;

                      case google.ima.AdEvent.Type.SKIPPED:
                        n = "SKIPPED";
                        i = "Fired when the ad is skipped by the user.";
                        break;

                      case google.ima.AdEvent.Type.STARTED:
                        n = "STARTED";
                        i = "Fired when the ad starts playing.";
                        break;

                      case google.ima.AdEvent.Type.THIRD_QUARTILE:
                        n = "THIRD_QUARTILE";
                        i = "Fired when the ad playhead crosses third quartile.";
                        break;

                      case google.ima.AdEvent.Type.USER_CLOSE:
                        n = "USER_CLOSE";
                        i = "Fired when the ad is closed by the user.";
                        break;

                      case google.ima.AdEvent.Type.VOLUME_CHANGED:
                        n = "VOLUME_CHANGED";
                        i = "Fired when the ad volume has changed.";
                        break;

                      case google.ima.AdEvent.Type.VOLUME_MUTED:
                        n = "VOLUME_MUTED";
                        i = "Fired when the ad volume has been muted.";
                    }
                    "" !== n && "" !== i && this.eventBus.broadcast(n, {
                        name: n,
                        message: i,
                        status: "success",
                        analytics: {
                            category: this.eventCategory,
                            action: n,
                            label: this.gameId,
                            value: i
                        }
                    });
                }
            }, {
                key: "_onAdError",
                value: function(e) {
                    var t = e.getError();
                    this.eventBus.broadcast("AD_ERROR", {
                        name: "AD_ERROR",
                        message: t,
                        status: "warning",
                        analytics: {
                            category: this.eventCategory,
                            action: "AD_ERROR",
                            label: this.gameId,
                            value: t
                        }
                    });
                    this.cancel();
                    window.clearTimeout(this.safetyTimer);
                }
            }, {
                key: "_onError",
                value: function(e) {
                    this.eventBus.broadcast("AD_SDK_ERROR", {
                        name: "AD_SDK_ERROR",
                        message: e,
                        status: "error",
                        analytics: {
                            category: this.eventCategory,
                            action: "AD_SDK_ERROR",
                            label: this.gameId,
                            value: e
                        }
                    });
                    this.cancel();
                    window.clearTimeout(this.safetyTimer);
                }
            }, {
                key: "_startSafetyTimer",
                value: function() {
                    var e = this;
                    this.safetyTimer = window.setTimeout(function() {
                        e.eventBus.broadcast("AD_SAFETY_TIMER", {
                            name: "AD_SAFETY_TIMER",
                            message: "Advertisement took too long to load.",
                            status: "warning",
                            analytics: {
                                category: e.eventCategory,
                                action: "AD_SAFETY_TIMER",
                                label: e.gameId,
                                value: "Advertisement took too long to load."
                            }
                        });
                        e.cancel();
                        window.clearTimeout(e.safetyTimer);
                    }, 12e3);
                    this.options.autoplay ? this.eventBus.subscribe("STARTED", function() {
                        (0, r.dankLog)("AD_SAFETY_TIMER", "Cleared the safety timer.", "success");
                        window.clearTimeout(e.safetyTimer);
                    }) : this.eventBus.subscribe("AD_SDK_MANAGER_READY", function() {
                        (0, r.dankLog)("AD_SAFETY_TIMER", "Cleared the safety timer.", "success");
                        window.clearTimeout(e.safetyTimer);
                    });
                }
            } ]);
            return e;
        }();
        n.default = l;
    }, {
        "../components/EventBus": 3,
        "../modules/common": 7,
        "../modules/dankLog": 8
    } ],
    6: [ function(e, t, n) {
        "use strict";
        var i = function(e) {
            return e && e.__esModule ? e : {
                default: e
            };
        }(e("./sdk")), o = window.gdApi.q[0][0], s = new i.default(o);
        window.gdApi = s;
    }, {
        "./sdk": 9
    } ],
    7: [ function(e, t, n) {
        "use strict";
        function i(e) {
            var t = [];
            for (var n in e) e.hasOwnProperty(n) && t.push(encodeURIComponent(n) + "=" + encodeURIComponent(e[n]));
            return t.join("&");
        }
        function o(e) {
            var t = null;
            if (window.DOMParser) try {
                t = new DOMParser().parseFromString(e, "text/xml");
            } catch (e) {
                t = null;
            } else if (window.ActiveXObject) try {
                (t = new ActiveXObject("Microsoft.XMLDOM")).async = !1;
                t.loadXML(e) || window.alert(t.parseError.reason + t.parseError.srcText);
            } catch (e) {
                t = null;
            } else console.log("cannot parse xml string!");
            return t;
        }
        function s(e, t) {
            var n = {
                toObj: function(e) {
                    var t = {};
                    if (1 == e.nodeType) {
                        if (e.attributes.length) for (var i = 0; i < e.attributes.length; i++) t["@" + e.attributes[i].nodeName] = (e.attributes[i].nodeValue || "").toString();
                        if (e.firstChild) {
                            for (var o = 0, s = 0, a = !1, r = e.firstChild; r; r = r.nextSibling) 1 == r.nodeType ? a = !0 : 3 == r.nodeType && r.nodeValue.match(/[^ \f\n\r\t\v]/) ? o++ : 4 == r.nodeType && s++;
                            if (a) if (o < 2 && s < 2) {
                                n.removeWhite(e);
                                for (r = e.firstChild; r; r = r.nextSibling) 3 == r.nodeType ? t["#text"] = n.escape(r.nodeValue) : 4 == r.nodeType ? t["#cdata"] = n.escape(r.nodeValue) : t[r.nodeName] ? t[r.nodeName] instanceof Array ? t[r.nodeName][t[r.nodeName].length] = n.toObj(r) : t[r.nodeName] = [ t[r.nodeName], n.toObj(r) ] : t[r.nodeName] = n.toObj(r);
                            } else e.attributes.length ? t["#text"] = n.escape(n.innerXml(e)) : t = n.escape(n.innerXml(e)); else if (o) e.attributes.length ? t["#text"] = n.escape(n.innerXml(e)) : t = n.escape(n.innerXml(e)); else if (s) if (s > 1) t = n.escape(n.innerXml(e)); else for (r = e.firstChild; r; r = r.nextSibling) t["#cdata"] = n.escape(r.nodeValue);
                        }
                        e.attributes.length || e.firstChild || (t = null);
                    } else 9 == e.nodeType ? t = n.toObj(e.documentElement) : alert("unhandled node type: " + e.nodeType);
                    return t;
                },
                toJson: function(e, t, i) {
                    var o = t ? '"' + t + '"' : "";
                    if (e instanceof Array) {
                        for (var s = 0, r = e.length; s < r; s++) e[s] = n.toJson(e[s], "", i + "\t");
                        o += (t ? ":[" : "[") + (e.length > 1 ? "\n" + i + "\t" + e.join(",\n" + i + "\t") + "\n" + i : e.join("")) + "]";
                    } else if (null == e) o += (t && ":") + "null"; else if ("object" == (void 0 === e ? "undefined" : a(e))) {
                        var d = [];
                        for (var l in e) d[d.length] = n.toJson(e[l], l, i + "\t");
                        o += (t ? ":{" : "{") + (d.length > 1 ? "\n" + i + "\t" + d.join(",\n" + i + "\t") + "\n" + i : d.join("")) + "}";
                    } else o += "string" == typeof e ? (t && ":") + '"' + e.toString() + '"' : (t && ":") + e.toString();
                    return o;
                },
                innerXml: function(e) {
                    var t = "";
                    if ("innerHTML" in e) t = e.innerHTML; else for (var n = e.firstChild; n; n = n.nextSibling) t += function e(t) {
                        var n = "";
                        if (1 == t.nodeType) {
                            n += "<" + t.nodeName;
                            for (var i = 0; i < t.attributes.length; i++) n += " " + t.attributes[i].nodeName + '="' + (t.attributes[i].nodeValue || "").toString() + '"';
                            if (t.firstChild) {
                                n += ">";
                                for (var o = t.firstChild; o; o = o.nextSibling) n += e(o);
                                n += "</" + t.nodeName + ">";
                            } else n += "/>";
                        } else 3 == t.nodeType ? n += t.nodeValue : 4 == t.nodeType && (n += "<![CDATA[" + t.nodeValue + "]]>");
                        return n;
                    }(n);
                    return t;
                },
                escape: function(e) {
                    return e.replace(/[\\]/g, "\\\\").replace(/[\"]/g, '\\"').replace(/[\n]/g, "\\n").replace(/[\r]/g, "\\r");
                },
                removeWhite: function(e) {
                    e.normalize();
                    for (var t = e.firstChild; t; ) if (3 == t.nodeType) if (t.nodeValue.match(/[^ \f\n\r\t\v]/)) t = t.nextSibling; else {
                        var i = t.nextSibling;
                        e.removeChild(t);
                        t = i;
                    } else if (1 == t.nodeType) {
                        n.removeWhite(t);
                        t = t.nextSibling;
                    } else t = t.nextSibling;
                    return e;
                }
            };
            9 == e.nodeType && (e = e.documentElement);
            return n.toObj(n.removeWhite(e));
        }
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        var a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
            return typeof e;
        } : function(e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        };
        n.extendDefaults = function(e, t) {
            var n = void 0;
            for (n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
            return e;
        };
        n.serialize = i;
        n.fetchData = function(e, t, n) {
            var o = void 0;
            if (window.XMLHttpRequest) o = new XMLHttpRequest(); else if (window.ActiveXObject) try {
                o = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
                try {
                    o = new ActiveXObject("Microsoft.XMLHTTP");
                } catch (e) {
                    console.log(e);
                }
            }
            o.open("POST", e, !0);
            o.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            o.onreadystatechange = function() {
                if (4 === o.readyState && 200 === o.status) {
                    var e = o.responseText;
                    n(e);
                } else n();
            };
            o.onerror = function(e) {
                console.log(e);
                n();
            };
            o.send(i(t));
        };
        n.getCookie = function(e) {
            for (var t = e + "=", n = document.cookie.split(";"), i = 0; i < n.length; i++) {
                for (var o = n[i]; " " == o.charAt(0); ) o = o.substring(1, o.length);
                if (0 == o.indexOf(t)) return o.substring(t.length, o.length);
            }
            return null;
        };
        n.setCookie = function(e, t, n, i) {
            var i = i || "/";
            if (n) {
                var o = new Date();
                o.setTime(o.getTime() + 24 * n * 60 * 60 * 1e3);
                s = "; expires=" + o.toGMTString();
            } else var s = "";
            document.cookie = e + "=" + t + s + "; path=" + i;
        };
        n.startSession = function() {
            for (var e = "", t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = 0; n < 32; n++) e += t.charAt(Math.floor(Math.random() * t.length));
            return e;
        };
        n.getXMLData = function(e) {
            var t = new Request(e, {
                method: "GET"
            });
            return fetch(t).then(function(e) {
                return e.text();
            }).then(function(e) {
                return s(o(e));
            }).catch(function(e) {
                return e;
            });
        };
        n.parseXML = o;
        n.XML2Object = s;
        n.getParentUrl = function() {
            if (-1 !== document.referrer.indexOf("gameplayer.io")) {
                var e = "https://gamedistribution.com/";
                if (-1 !== document.referrer.indexOf("?ref=")) {
                    var t = document.referrer.substr(document.referrer.indexOf("?ref=") + 5);
                    "" !== t ? "{portal%20name}" === t || "{portal name}" === t ? t = e : 0 !== t.indexOf("http") && (t = "http://" + t) : t = e;
                    return t;
                }
                return e;
            }
            return document.referrer && "" !== document.referrer ? document.referrer : document.location.href;
        };
    }, {} ],
    8: [ function(e, t, n) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        n.dankLog = function(e, t, n) {
            try {
                if (localStorage.getItem("gdApi_debug")) {
                    var i = "error" === n ? "background: #c4161e; color: #fff" : "warning" === n ? "background: #ff8c1c; color: #fff" : "background: #44a5ab; color: #fff", o = console.log("%c %c %c gdApi %c %c %c " + e + " ", "background: #9854d8", "background: #6c2ca7", "color: #fff; background: #450f78;", "background: #6c2ca7", "background: #9854d8", i, void 0 !== t ? t : "");
                    console.log.apply(console, o);
                }
            } catch (e) {
                console.log(e);
            }
        };
    }, {} ],
    9: [ function(e, t, n) {
        "use strict";
        function i(e) {
            return e && e.__esModule ? e : {
                default: e
            };
        }
        function o(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        var s = function() {
            function e(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1;
                    i.configurable = !0;
                    "value" in i && (i.writable = !0);
                    Object.defineProperty(e, i.key, i);
                }
            }
            return function(t, n, i) {
                n && e(t.prototype, n);
                i && e(t, i);
                return t;
            };
        }(), a = i(e("../package.json")), r = i(e("./components/VideoAd")), d = i(e("./components/EventBus")), l = i(e("./components/ImplementationTest")), u = i(e("./components/Analytics")), c = e("./modules/common"), h = e("./modules/dankLog"), g = null, A = function() {
            function e(t) {
                var n = this;
                o(this, e);
                if (g) return g;
                g = this;
                var i = {
                    debug: !1,
                    gameId: "4f3d7d38d24b740c95da2b03dc3a2333",
                    userId: "31D29405-8D37-4270-BF7C-8D99CCF0177F-s1",
                    advertisementSettings: {},
                    resumeGame: function() {},
                    pauseGame: function() {},
                    onEvent: function(e) {},
                    onInit: function(e) {},
                    onError: function(e) {}
                };
                this.options = t ? (0, c.extendDefaults)(i, t) : i;
                try {
                    (this.options.debug || localStorage.getItem("gdApi_debug")) && this.openConsole();
                } catch (e) {
                    console.log(e);
                }
                var s = new Date(), l = {
                    version: a.default.version,
                    date: s.getDate() + "-" + (s.getMonth() + 1) + "-" + s.getFullYear(),
                    time: s.getHours() + ":" + s.getMinutes()
                }, A = console.log("%c %c %c Gamedistribution.com HTML5 API | Version: " + l.version + " (" + l.date + " " + l.time + ") %c %c %c", "background: #9854d8", "background: #6c2ca7", "color: #fff; background: #450f78;", "background: #6c2ca7", "background: #9854d8", "background: #ffffff");
                console.log.apply(console, A);
                var p = this.options.userId.toLowerCase().split("-"), m = (0, c.getParentUrl)(), v = (0, 
                c.startSession)(), E = p.splice(5, 1)[0], f = p.join("-"), y = ("https:" === document.location.protocol ? "https://" : "http://") + f + "." + E + ".submityourgame.com/v1/";
                this.analytics = new u.default({
                    version: "v501",
                    sVersion: "v1",
                    gameId: this.options.gameId,
                    userId: this.options.userId,
                    referrer: m,
                    sessionId: v,
                    serverId: E,
                    regId: f,
                    serverName: y
                });
                this._thirdPartyAnalytics();
                this.eventBus = new d.default();
                this.eventBus.gameId = this.options.gameId;
                this.eventBus.subscribe("API_READY", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("API_ERROR", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("API_GAME_DATA_READY", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("API_GAME_START", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("API_GAME_PAUSE", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_SDK_LOADER_READY", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_SDK_MANAGER_READY", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_SDK_REQUEST_ADS", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_SDK_ERROR", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_SDK_FINISHED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_CANCELED", function(e) {
                    n._onEvent(e);
                    n.onResumeGame("Advertisement error, no worries, start / resume the game.", "warning");
                });
                this.eventBus.subscribe("AD_ERROR", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_SAFETY_TIMER", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_BREAK_READY", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("AD_METADATA", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("ALL_ADS_COMPLETED", function(e) {
                    n._onEvent(e);
                    n.onResumeGame("Advertisement(s) are done. Start / resume the game.", "success");
                });
                this.eventBus.subscribe("CLICK", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("COMPLETE", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("CONTENT_PAUSE_REQUESTED", function(e) {
                    n._onEvent(e);
                    n.onPauseGame("New advertisements requested and loaded", "success");
                });
                this.eventBus.subscribe("CONTENT_RESUME_REQUESTED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("DURATION_CHANGE", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("FIRST_QUARTILE", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("IMPRESSION", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("INTERACTION", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("LINEAR_CHANGED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("LOADED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("LOG", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("MIDPOINT", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("PAUSED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("RESUMED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("SKIPPABLE_STATE_CHANGED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("SKIPPED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("STARTED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("THIRD_QUARTILE", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("USER_CLOSE", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("VOLUME_CHANGED", function(e) {
                    return n._onEvent(e);
                });
                this.eventBus.subscribe("VOLUME_MUTED", function(e) {
                    return n._onEvent(e);
                });
                this.adRequestTimer = void 0;
                var b = new Promise(function(e, t) {
                    n.eventBus.subscribe("AD_SDK_MANAGER_READY", function(t) {
                        return e();
                    });
                    n.eventBus.subscribe("AD_SDK_ERROR", function(e) {
                        return t();
                    });
                }), _ = {
                    uuid: "ed40354e-856f-4aae-8cca-c8b98d70dec3",
                    affiliate: "A-GAMEDIST",
                    advertisements: !0,
                    preroll: !0,
                    midroll: 6e4 * parseInt(2)
                }, T = ("https:" === document.location.protocol ? "https://" : "http://") + E + ".bn.submityourgame.com/" + this.options.gameId + ".xml?ver=v501&url=" + m, S = new Promise(function(e) {
                    (0, c.getXMLData)(T).then(function(t) {
                        try {
                            var i = {
                                uuid: t.row[0].uid,
                                affiliate: t.row[0].aid,
                                advertisements: "1" === t.row[0].act,
                                preroll: "1" === t.row[0].pre,
                                midroll: 6e4 * parseInt(t.row[0].sat)
                            };
                            _ = (0, c.extendDefaults)(_, i);
                            (0, h.dankLog)("API_GAME_DATA_READY", _, "success");
                            new Image().src = "https://analytics.tunnl.com/collect?type=html5&evt=game.play&uuid=" + _.uuid + "&aid=" + _.affiliate;
                            n.videoAdInstance = new r.default(n.options.advertisementSettings);
                            n.videoAdInstance.gameId = n.options.gameId;
                            localStorage.getItem("gdApi_debug") || (n.videoAdInstance.tag = "https://adtag.tunnl.com/adsr?pa=1&c=4&sz=640x480&a=" + _.affiliate + "&gameid=" + n.options.gameId + "&ad_type=video_image&adapter=off&mfb=2&page_url=" + encodeURIComponent(m));
                            n.videoAdInstance.start();
                            if (!_.preroll) {
                                n.adRequestTimer = new Date();
                                n.videoAdInstance.preroll = !1;
                            }
                            e(_);
                        } catch (t) {
                            (0, h.dankLog)("API_GAME_DATA_READY", t, "warning");
                            e(_);
                        }
                    });
                });
                this.readyPromise = Promise.all([ S, b ]).then(function(e) {
                    n.eventBus.broadcast("API_READY", {
                        name: "API_READY",
                        message: "Everything is ready.",
                        status: "success",
                        analytics: {
                            category: "API",
                            action: "API_READY",
                            label: n.options.gameId,
                            value: "Everything is ready."
                        }
                    });
                    return e[0];
                }).catch(function() {
                    n.eventBus.broadcast("API_ERROR", {
                        name: "API_ERROR",
                        message: "The API failed.",
                        status: "error",
                        analytics: {
                            category: "API",
                            action: "API_ERROR",
                            label: n.options.gameId,
                            value: "The API failed."
                        }
                    });
                    return !1;
                });
            }
            s(e, [ {
                key: "_onEvent",
                value: function(e) {
                    (0, h.dankLog)(e.name, e.message, e.status);
                    try {
                        "undefined" != typeof _gd_ga && _gd_ga("gd.send", {
                            hitType: "event",
                            eventCategory: e.analytics.category ? e.analytics.category : "",
                            eventAction: e.analytics.action ? e.analytics.action : "",
                            eventLabel: e.analytics.label ? e.analytics.label : "",
                            eventValue: e.analytics.value ? e.analytics.value : ""
                        });
                    } catch (e) {
                        console.log(e);
                    }
                    this.options.onEvent(e);
                }
            }, {
                key: "_thirdPartyAnalytics",
                value: function() {
                    if ("undefined" == typeof _gd_ga) {
                        !function(e, t, n, i, o, s, a) {
                            e.GoogleAnalyticsObject = o;
                            e[o] = e[o] || function() {
                                (e[o].q = e[o].q || []).push(arguments);
                            }, e[o].l = 1 * new Date();
                            s = t.createElement(n), a = t.getElementsByTagName(n)[0];
                            s.async = 1;
                            s.src = "https://www.google-analytics.com/analytics.js";
                            a.parentNode.insertBefore(s, a);
                        }(window, document, "script", 0, "_gd_ga");
                        _gd_ga("create", "UA-102601800-1", {
                            name: "gd"
                        }, "auto");
                        _gd_ga("gd.send", "pageview");
                        var e = document.createElement("script");
                        e.innerHTML = "\n                var DS_OPTIONS = {\n                    id: 'GAMEDISTRIBUTION',\n                    success: function(id) {\n                        _gd_ga('gd.set', 'userId', id); \n                        _gd_ga('gd.set', 'dimension1', id);\n                    }\n                }\n            ";
                        document.head.appendChild(e);
                        !function(e, t, n, i) {
                            var o = t.createElement("script"), s = t.getElementsByTagName("script")[0];
                            o.type = "text/javascript";
                            o.async = !0;
                            o.src = "https://game.gamemonkey.org/static/main.min.js";
                            s.parentNode.insertBefore(o, s);
                        }(window, document);
                    }
                }
            }, {
                key: "showBanner",
                value: function() {
                    var e = this;
                    this.readyPromise.then(function(t) {
                        if (t.advertisements) if (void 0 !== e.adRequestTimer) if (new Date().valueOf() - e.adRequestTimer.valueOf() < t.midroll) (0, 
                        h.dankLog)("API_SHOW_BANNER", "The advertisement was requested too soon after the previous advertisement was finished.", "warning"); else {
                            (0, h.dankLog)("API_SHOW_BANNER", "Requested the midroll advertisement. It is now ready. Pause the game.", "success");
                            e.videoAdInstance.play();
                            e.adRequestTimer = new Date();
                        } else {
                            (0, h.dankLog)("API_SHOW_BANNER", "Requested the preroll advertisement. It is now ready. Pause the game.", "success");
                            e.videoAdInstance.play();
                            e.adRequestTimer = new Date();
                        } else {
                            e.videoAdInstance.cancel();
                            (0, h.dankLog)("API_SHOW_BANNER", "Advertisements are disabled. Start / resume the game.", "warning");
                        }
                    }).catch(function(e) {
                        (0, h.dankLog)("API_SHOW_BANNER", e, "error");
                    });
                }
            }, {
                key: "customLog",
                value: function(e) {
                    this.analytics.customLog(e);
                }
            }, {
                key: "play",
                value: function() {
                    this.analytics.play();
                }
            }, {
                key: "onResumeGame",
                value: function(e, t) {
                    this.options.resumeGame();
                    this.eventBus.broadcast("API_GAME_START", {
                        name: "API_GAME_START",
                        message: e,
                        status: t,
                        analytics: {
                            category: "API",
                            action: "API_GAME_START",
                            label: this.options.gameId,
                            value: e
                        }
                    });
                }
            }, {
                key: "onPauseGame",
                value: function(e, t) {
                    this.options.pauseGame();
                    this.eventBus.broadcast("API_GAME_PAUSE", {
                        name: "API_GAME_PAUSE",
                        message: e,
                        status: t,
                        analytics: {
                            category: "API",
                            action: "API_GAME_PAUSE",
                            label: this.options.gameId,
                            value: e
                        }
                    });
                }
            }, {
                key: "openConsole",
                value: function() {
                    try {
                        new l.default().start();
                        localStorage.setItem("gdApi_debug", !0);
                    } catch (e) {
                        console.log(e);
                    }
                }
            } ]);
            return e;
        }();
        n.default = A;
    }, {
        "../package.json": 1,
        "./components/Analytics": 2,
        "./components/EventBus": 3,
        "./components/ImplementationTest": 4,
        "./components/VideoAd": 5,
        "./modules/common": 7,
        "./modules/dankLog": 8
    } ]
}, {}, [ 2, 3, 4, 5, 6, 7, 8, 9 ]);